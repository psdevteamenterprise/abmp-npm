import { isNumber } from '../utils';
import { AggregatingValidator, messages } from '../errors';
export class PipelineValidator extends AggregatingValidator {
    constructor(operatorName, previousInvalidArguments) {
        super(previousInvalidArguments);
        this.operatorName = operatorName;
    }
    _isNumber(specifier, operand) {
        return this.addValidation(() => isNumber(operand), () => messages.queryValidations.isNumber(this.operatorName, specifier, operand));
    }
    isPositiveNumber(operand) {
        return this._isNumber('positive', operand).addValidation(() => !Number.isNaN(operand) && operand > 0, () => messages.queryValidations.isPositiveNumber(this.operatorName, operand));
    }
    isNonNegativeNumber(operand) {
        return this._isNumber('non-negative', operand).addValidation(() => !Number.isNaN(operand) && operand >= 0, () => messages.queryValidations.isNonNegativeNumber(this.operatorName, operand));
    }
}
//# sourceMappingURL=PipelineValidator.js.map