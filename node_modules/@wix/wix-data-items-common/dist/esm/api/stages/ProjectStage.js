export class ProjectStageImpl {
    constructor() {
        this.fields = [];
    }
    include(...fieldNames) {
        fieldNames.forEach((fieldName) => {
            this.fields.push({ include: { fieldName } });
        });
        return this;
    }
    exclude(...fieldNames) {
        fieldNames.forEach((fieldName) => {
            this.fields.push({ exclude: { fieldName } });
        });
        return this;
    }
    reshape(expression, fieldName) {
        this.addField(expression, fieldName);
        return this;
    }
    nested(stage, fieldName) {
        return this.addNestedProjectionField(fieldName, stage.fields);
    }
    addField(expression, resultFieldName) {
        this.fields.push({
            reshape: { resultFieldName, expression: expression.toProto() },
        });
        return this;
    }
    addNestedProjectionField(resultFieldName, fields) {
        this.fields.push({ projectNested: { resultFieldName, fields } });
        return this;
    }
    toProto() {
        return { projection: { fields: this.fields } };
    }
}
//# sourceMappingURL=ProjectStage.js.map