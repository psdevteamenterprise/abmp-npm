export class FieldExpressionImpl {
    constructor(fieldPath) {
        this.fieldPath = fieldPath;
    }
    toProto() {
        return { fieldPath: this.fieldPath };
    }
}
export class TextExpressionImpl {
    constructor(value) {
        this.value = value;
    }
    toProto() {
        return { text: this.value };
    }
}
export class NumericExpressionImpl {
    constructor(value) {
        this.value = value;
    }
    toProto() {
        return { numeric: this.value };
    }
}
export class AddExpressionImpl {
    constructor(expressions) {
        this.expressions = expressions;
    }
    toProto() {
        return {
            add: {
                expressions: this.expressions.map((e) => e.toProto()),
            },
        };
    }
}
export class SubtractExpressionImpl {
    constructor(firstExpression, secondExpression) {
        this.firstExpression = firstExpression;
        this.secondExpression = secondExpression;
    }
    toProto() {
        return {
            subtract: {
                firstExpression: this.firstExpression.toProto(),
                secondExpression: this.secondExpression.toProto(),
            },
        };
    }
}
export class MultiplyExpressionImpl {
    constructor(expressions) {
        this.expressions = expressions;
    }
    toProto() {
        return {
            multiply: {
                expressions: this.expressions.map((e) => e.toProto()),
            },
        };
    }
}
export class DivideExpressionImpl {
    constructor(firstExpression, secondExpression) {
        this.firstExpression = firstExpression;
        this.secondExpression = secondExpression;
    }
    toProto() {
        return {
            divide: {
                firstExpression: this.firstExpression.toProto(),
                secondExpression: this.secondExpression.toProto(),
            },
        };
    }
}
export class SumExpressionImpl {
    constructor(expressions) {
        this.expressions = expressions;
    }
    toProto() {
        return {
            sum: {
                expressions: this.expressions.map((e) => e.toProto()),
            },
        };
    }
}
export class AbsExpressionImpl {
    constructor(expression) {
        this.expression = expression;
    }
    toProto() {
        return {
            abs: {
                expression: this.expression.toProto(),
            },
        };
    }
}
export class ModExpressionImpl {
    constructor(firstExpression, secondExpression) {
        this.firstExpression = firstExpression;
        this.secondExpression = secondExpression;
    }
    toProto() {
        return {
            mod: {
                firstExpression: this.firstExpression.toProto(),
                secondExpression: this.secondExpression.toProto(),
            },
        };
    }
}
export class FloorExpressionImpl {
    constructor(expression) {
        this.expression = expression;
    }
    toProto() {
        return {
            floor: {
                expression: this.expression.toProto(),
            },
        };
    }
}
export class CeilExpressionImpl {
    constructor(expression) {
        this.expression = expression;
    }
    toProto() {
        return {
            ceil: {
                expression: this.expression.toProto(),
            },
        };
    }
}
export class ConcatExpressionImpl {
    constructor(expressions) {
        this.expressions = expressions;
    }
    toProto() {
        return {
            concat: {
                expressions: this.expressions.map((e) => e.toProto()),
            },
        };
    }
}
export class StringifyExpressionImpl {
    constructor(expression) {
        this.expression = expression;
    }
    toProto() {
        return {
            stringify: {
                expression: this.expression.toProto(),
            },
        };
    }
}
export class ToLowerExpressionImpl {
    constructor(expression) {
        this.expression = expression;
    }
    toProto() {
        return {
            toLower: {
                expression: this.expression.toProto(),
            },
        };
    }
}
export class ToUpperExpressionImpl {
    constructor(expression) {
        this.expression = expression;
    }
    toProto() {
        return {
            toUpper: {
                expression: this.expression.toProto(),
            },
        };
    }
}
export class SubstringExpressionImpl {
    constructor(expression, startExpression, lengthExpression) {
        this.expression = expression;
        this.startExpression = startExpression;
        this.lengthExpression = lengthExpression;
    }
    toProto() {
        const proto = {
            substring: {
                expression: this.expression.toProto(),
                startExpression: this.startExpression.toProto(),
            },
        };
        if (this.lengthExpression) {
            proto.substring.lengthExpression = this.lengthExpression.toProto();
        }
        return proto;
    }
}
export class LengthExpressionImpl {
    constructor(expression) {
        this.expression = expression;
    }
    toProto() {
        return {
            length: { expression: this.expression.toProto() },
        };
    }
}
//# sourceMappingURL=Expression.js.map