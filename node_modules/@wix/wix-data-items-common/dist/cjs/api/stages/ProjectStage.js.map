{"version":3,"names":["ProjectStageImpl","constructor","_defineProperty2","default","include","fieldNames","forEach","fieldName","fields","push","exclude","reshape","expression","addField","nested","stage","addNestedProjectionField","resultFieldName","toProto","projectNested","projection","exports"],"sources":["../../../../src/api/stages/ProjectStage.ts"],"sourcesContent":["import { Expression } from '../expressions/Expression'\nimport * as apiTypes from '../../types/data-item-types'\nimport { PipelineStage } from './stages'\n\n/**\n * @builder\n */\nexport interface ProjectStage extends PipelineStage {\n  /**\n   * @internal\n   */\n  fields: apiTypes.Field[]\n\n  include(...fieldNames: string[]): ProjectStage\n  exclude(...fieldNames: string[]): ProjectStage\n  reshape(expression: Expression, fieldName: string): ProjectStage\n  nested(stage: ProjectStage, fieldName: string): ProjectStage\n}\n\nexport class ProjectStageImpl implements ProjectStage {\n  fields: apiTypes.Field[] = []\n\n  include(...fieldNames: string[]): ProjectStage {\n    fieldNames.forEach((fieldName) => {\n      this.fields.push({ include: { fieldName } })\n    })\n    return this\n  }\n\n  exclude(...fieldNames: string[]): ProjectStage {\n    fieldNames.forEach((fieldName) => {\n      this.fields.push({ exclude: { fieldName } })\n    })\n    return this\n  }\n\n  reshape(expression: Expression, fieldName: string): ProjectStage {\n    this.addField(expression, fieldName)\n    return this\n  }\n\n  nested(stage: ProjectStage, fieldName: string): ProjectStage {\n    return this.addNestedProjectionField(fieldName, stage.fields)\n  }\n\n  private addField(\n    expression: Expression,\n    resultFieldName: string\n  ): ProjectStage {\n    this.fields.push({\n      reshape: { resultFieldName, expression: expression.toProto() },\n    })\n    return this\n  }\n\n  private addNestedProjectionField(\n    resultFieldName: string,\n    fields: apiTypes.Field[]\n  ): ProjectStage {\n    this.fields.push({ projectNested: { resultFieldName, fields } })\n    return this\n  }\n\n  toProto(): apiTypes.Stage {\n    return { projection: { fields: this.fields } }\n  }\n}\n"],"mappings":";;;;;;AAIA;AACA;AACA;;AAaO,MAAMA,gBAAgB,CAAyB;EAAAC,YAAA;IAAA,IAAAC,gBAAA,CAAAC,OAAA,kBACzB,EAAE;EAAA;EAE7BC,OAAOA,CAAC,GAAGC,UAAoB,EAAgB;IAC7CA,UAAU,CAACC,OAAO,CAAEC,SAAS,IAAK;MAChC,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC;QAAEL,OAAO,EAAE;UAAEG;QAAU;MAAE,CAAC,CAAC;IAC9C,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EAEAG,OAAOA,CAAC,GAAGL,UAAoB,EAAgB;IAC7CA,UAAU,CAACC,OAAO,CAAEC,SAAS,IAAK;MAChC,IAAI,CAACC,MAAM,CAACC,IAAI,CAAC;QAAEC,OAAO,EAAE;UAAEH;QAAU;MAAE,CAAC,CAAC;IAC9C,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EAEAI,OAAOA,CAACC,UAAsB,EAAEL,SAAiB,EAAgB;IAC/D,IAAI,CAACM,QAAQ,CAACD,UAAU,EAAEL,SAAS,CAAC;IACpC,OAAO,IAAI;EACb;EAEAO,MAAMA,CAACC,KAAmB,EAAER,SAAiB,EAAgB;IAC3D,OAAO,IAAI,CAACS,wBAAwB,CAACT,SAAS,EAAEQ,KAAK,CAACP,MAAM,CAAC;EAC/D;EAEQK,QAAQA,CACdD,UAAsB,EACtBK,eAAuB,EACT;IACd,IAAI,CAACT,MAAM,CAACC,IAAI,CAAC;MACfE,OAAO,EAAE;QAAEM,eAAe;QAAEL,UAAU,EAAEA,UAAU,CAACM,OAAO,CAAC;MAAE;IAC/D,CAAC,CAAC;IACF,OAAO,IAAI;EACb;EAEQF,wBAAwBA,CAC9BC,eAAuB,EACvBT,MAAwB,EACV;IACd,IAAI,CAACA,MAAM,CAACC,IAAI,CAAC;MAAEU,aAAa,EAAE;QAAEF,eAAe;QAAET;MAAO;IAAE,CAAC,CAAC;IAChE,OAAO,IAAI;EACb;EAEAU,OAAOA,CAAA,EAAmB;IACxB,OAAO;MAAEE,UAAU,EAAE;QAAEZ,MAAM,EAAE,IAAI,CAACA;MAAO;IAAE,CAAC;EAChD;AACF;AAACa,OAAA,CAAArB,gBAAA,GAAAA,gBAAA","ignoreList":[]}