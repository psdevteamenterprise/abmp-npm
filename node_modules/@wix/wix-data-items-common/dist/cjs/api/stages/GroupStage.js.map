{"version":3,"names":["_Expression","require","GroupStageImpl","constructor","_defineProperty2","default","by","expression","key","ids","push","sum","resultFieldName","addAccumulator","avg","min","max","count","NumericExpressionImpl","first","last","type","accumulators","toProto","group","groupIds","map","id","accumulator","exports"],"sources":["../../../../src/api/stages/GroupStage.ts"],"sourcesContent":["import { Expression, NumericExpressionImpl } from '../expressions/Expression'\nimport * as apiTypes from '../../types/data-item-types'\nimport { PipelineStage } from './stages'\n\n/**\n * @builder\n */\nexport interface GroupStage extends PipelineStage {\n  by(expression: Expression, key: string): GroupStage\n  sum(expression: Expression, resultFieldName: string): GroupStage\n  avg(expression: Expression, resultFieldName: string): GroupStage\n  min(expression: Expression, resultFieldName: string): GroupStage\n  max(expression: Expression, resultFieldName: string): GroupStage\n  count(resultFieldName: string): GroupStage\n  first(expression: Expression, resultFieldName: string): GroupStage\n  last(expression: Expression, resultFieldName: string): GroupStage\n  push(expression: Expression, resultFieldName: string): GroupStage\n}\n\nexport class GroupStageImpl implements GroupStage {\n  private ids: Id[] = []\n  private accumulators: Accumulator[] = []\n\n  by(expression: Expression, key: string): GroupStage {\n    this.ids.push({ expression, key })\n    return this\n  }\n\n  sum(expression: Expression, resultFieldName: string): GroupStage {\n    return this.addAccumulator(expression, 'sum', resultFieldName)\n  }\n\n  avg(expression: Expression, resultFieldName: string): GroupStage {\n    return this.addAccumulator(expression, 'avg', resultFieldName)\n  }\n\n  min(expression: Expression, resultFieldName: string): GroupStage {\n    return this.addAccumulator(expression, 'min', resultFieldName)\n  }\n\n  max(expression: Expression, resultFieldName: string): GroupStage {\n    return this.addAccumulator(expression, 'max', resultFieldName)\n  }\n\n  count(resultFieldName: string): GroupStage {\n    return this.addAccumulator(\n      new NumericExpressionImpl(1),\n      'sum',\n      resultFieldName\n    )\n  }\n\n  first(expression: Expression, resultFieldName: string): GroupStage {\n    return this.addAccumulator(expression, 'first', resultFieldName)\n  }\n\n  last(expression: Expression, resultFieldName: string): GroupStage {\n    return this.addAccumulator(expression, 'last', resultFieldName)\n  }\n\n  push(expression: Expression, resultFieldName: string): GroupStage {\n    return this.addAccumulator(expression, 'push', resultFieldName)\n  }\n\n  private addAccumulator(\n    expression: Expression,\n    type: AccumulatorType,\n    resultFieldName: string\n  ): GroupStage {\n    this.accumulators.push({ type, expression, resultFieldName })\n    return this\n  }\n\n  toProto(): apiTypes.Stage {\n    return {\n      group: {\n        groupIds: this.ids.map((id) => ({\n          expression: id.expression.toProto(),\n          key: id.key,\n        })),\n        accumulators: this.accumulators.map((accumulator) => ({\n          [accumulator.type]: {\n            expression: accumulator.expression.toProto(),\n          },\n          resultFieldName: accumulator.resultFieldName,\n        })),\n      },\n    }\n  }\n}\n\ntype AccumulatorType = 'avg' | 'min' | 'max' | 'sum' | 'first' | 'last' | 'push'\n\ninterface Id {\n  expression: Expression\n  key: string\n}\n\ninterface Accumulator {\n  type: AccumulatorType\n  expression: Expression\n  resultFieldName: string\n}\n"],"mappings":";;;;;;AAAA,IAAAA,WAAA,GAAAC,OAAA;AAIA;AACA;AACA;;AAaO,MAAMC,cAAc,CAAuB;EAAAC,YAAA;IAAA,IAAAC,gBAAA,CAAAC,OAAA,eAC5B,EAAE;IAAA,IAAAD,gBAAA,CAAAC,OAAA,wBACgB,EAAE;EAAA;EAExCC,EAAEA,CAACC,UAAsB,EAAEC,GAAW,EAAc;IAClD,IAAI,CAACC,GAAG,CAACC,IAAI,CAAC;MAAEH,UAAU;MAAEC;IAAI,CAAC,CAAC;IAClC,OAAO,IAAI;EACb;EAEAG,GAAGA,CAACJ,UAAsB,EAAEK,eAAuB,EAAc;IAC/D,OAAO,IAAI,CAACC,cAAc,CAACN,UAAU,EAAE,KAAK,EAAEK,eAAe,CAAC;EAChE;EAEAE,GAAGA,CAACP,UAAsB,EAAEK,eAAuB,EAAc;IAC/D,OAAO,IAAI,CAACC,cAAc,CAACN,UAAU,EAAE,KAAK,EAAEK,eAAe,CAAC;EAChE;EAEAG,GAAGA,CAACR,UAAsB,EAAEK,eAAuB,EAAc;IAC/D,OAAO,IAAI,CAACC,cAAc,CAACN,UAAU,EAAE,KAAK,EAAEK,eAAe,CAAC;EAChE;EAEAI,GAAGA,CAACT,UAAsB,EAAEK,eAAuB,EAAc;IAC/D,OAAO,IAAI,CAACC,cAAc,CAACN,UAAU,EAAE,KAAK,EAAEK,eAAe,CAAC;EAChE;EAEAK,KAAKA,CAACL,eAAuB,EAAc;IACzC,OAAO,IAAI,CAACC,cAAc,CACxB,IAAIK,iCAAqB,CAAC,CAAC,CAAC,EAC5B,KAAK,EACLN,eACF,CAAC;EACH;EAEAO,KAAKA,CAACZ,UAAsB,EAAEK,eAAuB,EAAc;IACjE,OAAO,IAAI,CAACC,cAAc,CAACN,UAAU,EAAE,OAAO,EAAEK,eAAe,CAAC;EAClE;EAEAQ,IAAIA,CAACb,UAAsB,EAAEK,eAAuB,EAAc;IAChE,OAAO,IAAI,CAACC,cAAc,CAACN,UAAU,EAAE,MAAM,EAAEK,eAAe,CAAC;EACjE;EAEAF,IAAIA,CAACH,UAAsB,EAAEK,eAAuB,EAAc;IAChE,OAAO,IAAI,CAACC,cAAc,CAACN,UAAU,EAAE,MAAM,EAAEK,eAAe,CAAC;EACjE;EAEQC,cAAcA,CACpBN,UAAsB,EACtBc,IAAqB,EACrBT,eAAuB,EACX;IACZ,IAAI,CAACU,YAAY,CAACZ,IAAI,CAAC;MAAEW,IAAI;MAAEd,UAAU;MAAEK;IAAgB,CAAC,CAAC;IAC7D,OAAO,IAAI;EACb;EAEAW,OAAOA,CAAA,EAAmB;IACxB,OAAO;MACLC,KAAK,EAAE;QACLC,QAAQ,EAAE,IAAI,CAAChB,GAAG,CAACiB,GAAG,CAAEC,EAAE,KAAM;UAC9BpB,UAAU,EAAEoB,EAAE,CAACpB,UAAU,CAACgB,OAAO,CAAC,CAAC;UACnCf,GAAG,EAAEmB,EAAE,CAACnB;QACV,CAAC,CAAC,CAAC;QACHc,YAAY,EAAE,IAAI,CAACA,YAAY,CAACI,GAAG,CAAEE,WAAW,KAAM;UACpD,CAACA,WAAW,CAACP,IAAI,GAAG;YAClBd,UAAU,EAAEqB,WAAW,CAACrB,UAAU,CAACgB,OAAO,CAAC;UAC7C,CAAC;UACDX,eAAe,EAAEgB,WAAW,CAAChB;QAC/B,CAAC,CAAC;MACJ;IACF,CAAC;EACH;AACF;AAACiB,OAAA,CAAA3B,cAAA,GAAAA,cAAA","ignoreList":[]}