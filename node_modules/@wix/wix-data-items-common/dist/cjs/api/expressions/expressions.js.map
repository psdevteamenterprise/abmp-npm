{"version":3,"names":["_Expression","require","expressions","exports","field","fieldPath","FieldExpressionImpl","text","value","TextExpressionImpl","numeric","NumericExpressionImpl","add","AddExpressionImpl","subtract","first","second","SubtractExpressionImpl","multiply","MultiplyExpressionImpl","divide","DivideExpressionImpl","sum","SumExpressionImpl","abs","expression","AbsExpressionImpl","mod","ModExpressionImpl","floor","FloorExpressionImpl","ceil","CeilExpressionImpl","concat","ConcatExpressionImpl","stringify","StringifyExpressionImpl","toLower","ToLowerExpressionImpl","toUpper","ToUpperExpressionImpl","substring","start","length","SubstringExpressionImpl","LengthExpressionImpl"],"sources":["../../../../src/api/expressions/expressions.ts"],"sourcesContent":["import {\n  Expression,\n  FieldExpression,\n  FieldExpressionImpl,\n  TextExpression,\n  TextExpressionImpl,\n  NumericExpression,\n  NumericExpressionImpl,\n  AddExpression,\n  AddExpressionImpl,\n  SubtractExpression,\n  SubtractExpressionImpl,\n  MultiplyExpression,\n  MultiplyExpressionImpl,\n  DivideExpression,\n  DivideExpressionImpl,\n  SumExpression,\n  SumExpressionImpl,\n  AbsExpression,\n  AbsExpressionImpl,\n  ModExpression,\n  ModExpressionImpl,\n  FloorExpression,\n  FloorExpressionImpl,\n  CeilExpression,\n  CeilExpressionImpl,\n  ConcatExpression,\n  ConcatExpressionImpl,\n  StringifyExpression,\n  StringifyExpressionImpl,\n  ToLowerExpression,\n  ToLowerExpressionImpl,\n  ToUpperExpression,\n  ToUpperExpressionImpl,\n  SubstringExpression,\n  SubstringExpressionImpl,\n  LengthExpression,\n  LengthExpressionImpl,\n} from './Expression'\n\nexport const expressions: WixDataAggregatePipelineExpressions = {\n  field: (fieldPath: string): FieldExpression =>\n    new FieldExpressionImpl(fieldPath),\n  text: (value: string): TextExpression => new TextExpressionImpl(value),\n  numeric: (value: number): NumericExpression =>\n    new NumericExpressionImpl(value),\n  add: (...expressions: Expression[]): AddExpression =>\n    new AddExpressionImpl(expressions),\n  subtract: (first: Expression, second: Expression): SubtractExpression =>\n    new SubtractExpressionImpl(first, second),\n  multiply: (...expressions: Expression[]): MultiplyExpression =>\n    new MultiplyExpressionImpl(expressions),\n  divide: (first: Expression, second: Expression): DivideExpression =>\n    new DivideExpressionImpl(first, second),\n  sum: (...expressions: Expression[]): SumExpression =>\n    new SumExpressionImpl(expressions),\n  abs: (expression: Expression): AbsExpression =>\n    new AbsExpressionImpl(expression),\n  mod: (first: Expression, second: Expression): ModExpression =>\n    new ModExpressionImpl(first, second),\n\n  floor: (expression: Expression): FloorExpression =>\n    new FloorExpressionImpl(expression),\n  ceil: (expression: Expression): CeilExpression =>\n    new CeilExpressionImpl(expression),\n  concat: (...expressions: Expression[]): ConcatExpression =>\n    new ConcatExpressionImpl(expressions),\n  stringify: (expression: Expression): StringifyExpression =>\n    new StringifyExpressionImpl(expression),\n  toLower: (expression: Expression): ToLowerExpression =>\n    new ToLowerExpressionImpl(expression),\n  toUpper: (expression: Expression): ToUpperExpression =>\n    new ToUpperExpressionImpl(expression),\n  substring: (\n    expression: Expression,\n    start: Expression,\n    length?: Expression\n  ): SubstringExpression =>\n    new SubstringExpressionImpl(expression, start, length),\n  length: (expression: Expression): LengthExpression =>\n    new LengthExpressionImpl(expression),\n}\n\n/**\n * @builder\n */\nexport interface WixDataAggregatePipelineExpressions {\n  field(fieldPath: string): FieldExpression\n  text(value: string): TextExpression\n  numeric(value: number): NumericExpression\n  add(...expressions: Expression[]): AddExpression\n  subtract(first: Expression, second: Expression): SubtractExpression\n  multiply(...expressions: Expression[]): MultiplyExpression\n  divide(first: Expression, second: Expression): DivideExpression\n  sum(...expressions: Expression[]): SumExpression\n  abs(expression: Expression): AbsExpression\n  mod(first: Expression, second: Expression): ModExpression\n  floor(expression: Expression): FloorExpression\n  ceil(expression: Expression): CeilExpression\n  concat(...expressions: Expression[]): ConcatExpression\n  stringify(expression: Expression): StringifyExpression\n  toLower(expression: Expression): ToLowerExpression\n  toUpper(expression: Expression): ToUpperExpression\n  substring(\n    expression: Expression,\n    start: Expression,\n    length?: Expression\n  ): SubstringExpression\n  length(expression: Expression): LengthExpression\n}\n"],"mappings":";;;;AAAA,IAAAA,WAAA,GAAAC,OAAA;AAwCO,MAAMC,WAAgD,GAAAC,OAAA,CAAAD,WAAA,GAAG;EAC9DE,KAAK,EAAGC,SAAiB,IACvB,IAAIC,+BAAmB,CAACD,SAAS,CAAC;EACpCE,IAAI,EAAGC,KAAa,IAAqB,IAAIC,8BAAkB,CAACD,KAAK,CAAC;EACtEE,OAAO,EAAGF,KAAa,IACrB,IAAIG,iCAAqB,CAACH,KAAK,CAAC;EAClCI,GAAG,EAAEA,CAAC,GAAGV,WAAyB,KAChC,IAAIW,6BAAiB,CAACX,WAAW,CAAC;EACpCY,QAAQ,EAAEA,CAACC,KAAiB,EAAEC,MAAkB,KAC9C,IAAIC,kCAAsB,CAACF,KAAK,EAAEC,MAAM,CAAC;EAC3CE,QAAQ,EAAEA,CAAC,GAAGhB,WAAyB,KACrC,IAAIiB,kCAAsB,CAACjB,WAAW,CAAC;EACzCkB,MAAM,EAAEA,CAACL,KAAiB,EAAEC,MAAkB,KAC5C,IAAIK,gCAAoB,CAACN,KAAK,EAAEC,MAAM,CAAC;EACzCM,GAAG,EAAEA,CAAC,GAAGpB,WAAyB,KAChC,IAAIqB,6BAAiB,CAACrB,WAAW,CAAC;EACpCsB,GAAG,EAAGC,UAAsB,IAC1B,IAAIC,6BAAiB,CAACD,UAAU,CAAC;EACnCE,GAAG,EAAEA,CAACZ,KAAiB,EAAEC,MAAkB,KACzC,IAAIY,6BAAiB,CAACb,KAAK,EAAEC,MAAM,CAAC;EAEtCa,KAAK,EAAGJ,UAAsB,IAC5B,IAAIK,+BAAmB,CAACL,UAAU,CAAC;EACrCM,IAAI,EAAGN,UAAsB,IAC3B,IAAIO,8BAAkB,CAACP,UAAU,CAAC;EACpCQ,MAAM,EAAEA,CAAC,GAAG/B,WAAyB,KACnC,IAAIgC,gCAAoB,CAAChC,WAAW,CAAC;EACvCiC,SAAS,EAAGV,UAAsB,IAChC,IAAIW,mCAAuB,CAACX,UAAU,CAAC;EACzCY,OAAO,EAAGZ,UAAsB,IAC9B,IAAIa,iCAAqB,CAACb,UAAU,CAAC;EACvCc,OAAO,EAAGd,UAAsB,IAC9B,IAAIe,iCAAqB,CAACf,UAAU,CAAC;EACvCgB,SAAS,EAAEA,CACThB,UAAsB,EACtBiB,KAAiB,EACjBC,MAAmB,KAEnB,IAAIC,mCAAuB,CAACnB,UAAU,EAAEiB,KAAK,EAAEC,MAAM,CAAC;EACxDA,MAAM,EAAGlB,UAAsB,IAC7B,IAAIoB,gCAAoB,CAACpB,UAAU;AACvC,CAAC;;AAED;AACA;AACA","ignoreList":[]}