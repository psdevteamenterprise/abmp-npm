"use strict";

exports.__esModule = true;
exports.ToUpperExpressionImpl = exports.ToLowerExpressionImpl = exports.TextExpressionImpl = exports.SumExpressionImpl = exports.SubtractExpressionImpl = exports.SubstringExpressionImpl = exports.StringifyExpressionImpl = exports.NumericExpressionImpl = exports.MultiplyExpressionImpl = exports.ModExpressionImpl = exports.LengthExpressionImpl = exports.FloorExpressionImpl = exports.FieldExpressionImpl = exports.DivideExpressionImpl = exports.ConcatExpressionImpl = exports.CeilExpressionImpl = exports.AddExpressionImpl = exports.AbsExpressionImpl = void 0;
/**
 * @builder
 */

class FieldExpressionImpl {
  constructor(fieldPath) {
    this.fieldPath = fieldPath;
  }
  toProto() {
    return {
      fieldPath: this.fieldPath
    };
  }
}

/**
 * @builder
 */
exports.FieldExpressionImpl = FieldExpressionImpl;
class TextExpressionImpl {
  constructor(value) {
    this.value = value;
  }
  toProto() {
    return {
      text: this.value
    };
  }
}

/**
 * @builder
 */
exports.TextExpressionImpl = TextExpressionImpl;
class NumericExpressionImpl {
  constructor(value) {
    this.value = value;
  }
  toProto() {
    return {
      numeric: this.value
    };
  }
}

/**
 * @builder
 */
exports.NumericExpressionImpl = NumericExpressionImpl;
class AddExpressionImpl {
  constructor(expressions) {
    this.expressions = expressions;
  }
  toProto() {
    return {
      add: {
        expressions: this.expressions.map(e => e.toProto())
      }
    };
  }
}

/**
 * @builder
 */
exports.AddExpressionImpl = AddExpressionImpl;
class SubtractExpressionImpl {
  constructor(firstExpression, secondExpression) {
    this.firstExpression = firstExpression;
    this.secondExpression = secondExpression;
  }
  toProto() {
    return {
      subtract: {
        firstExpression: this.firstExpression.toProto(),
        secondExpression: this.secondExpression.toProto()
      }
    };
  }
}

/**
 * @builder
 */
exports.SubtractExpressionImpl = SubtractExpressionImpl;
class MultiplyExpressionImpl {
  constructor(expressions) {
    this.expressions = expressions;
  }
  toProto() {
    return {
      multiply: {
        expressions: this.expressions.map(e => e.toProto())
      }
    };
  }
}

/**
 * @builder
 */
exports.MultiplyExpressionImpl = MultiplyExpressionImpl;
class DivideExpressionImpl {
  constructor(firstExpression, secondExpression) {
    this.firstExpression = firstExpression;
    this.secondExpression = secondExpression;
  }
  toProto() {
    return {
      divide: {
        firstExpression: this.firstExpression.toProto(),
        secondExpression: this.secondExpression.toProto()
      }
    };
  }
}

/**
 * @builder
 */
exports.DivideExpressionImpl = DivideExpressionImpl;
class SumExpressionImpl {
  constructor(expressions) {
    this.expressions = expressions;
  }
  toProto() {
    return {
      sum: {
        expressions: this.expressions.map(e => e.toProto())
      }
    };
  }
}

/**
 * @builder
 */
exports.SumExpressionImpl = SumExpressionImpl;
class AbsExpressionImpl {
  constructor(expression) {
    this.expression = expression;
  }
  toProto() {
    return {
      abs: {
        expression: this.expression.toProto()
      }
    };
  }
}

/**
 * @builder
 */
exports.AbsExpressionImpl = AbsExpressionImpl;
class ModExpressionImpl {
  constructor(firstExpression, secondExpression) {
    this.firstExpression = firstExpression;
    this.secondExpression = secondExpression;
  }
  toProto() {
    return {
      mod: {
        firstExpression: this.firstExpression.toProto(),
        secondExpression: this.secondExpression.toProto()
      }
    };
  }
}

/**
 * @builder
 */
exports.ModExpressionImpl = ModExpressionImpl;
class FloorExpressionImpl {
  constructor(expression) {
    this.expression = expression;
  }
  toProto() {
    return {
      floor: {
        expression: this.expression.toProto()
      }
    };
  }
}

/**
 * @builder
 */
exports.FloorExpressionImpl = FloorExpressionImpl;
class CeilExpressionImpl {
  constructor(expression) {
    this.expression = expression;
  }
  toProto() {
    return {
      ceil: {
        expression: this.expression.toProto()
      }
    };
  }
}

/**
 * @builder
 */
exports.CeilExpressionImpl = CeilExpressionImpl;
class ConcatExpressionImpl {
  constructor(expressions) {
    this.expressions = expressions;
  }
  toProto() {
    return {
      concat: {
        expressions: this.expressions.map(e => e.toProto())
      }
    };
  }
}

/**
 * @builder
 */
exports.ConcatExpressionImpl = ConcatExpressionImpl;
class StringifyExpressionImpl {
  constructor(expression) {
    this.expression = expression;
  }
  toProto() {
    return {
      stringify: {
        expression: this.expression.toProto()
      }
    };
  }
}

/**
 * @builder
 */
exports.StringifyExpressionImpl = StringifyExpressionImpl;
class ToLowerExpressionImpl {
  constructor(expression) {
    this.expression = expression;
  }
  toProto() {
    return {
      toLower: {
        expression: this.expression.toProto()
      }
    };
  }
}

/**
 * @builder
 */
exports.ToLowerExpressionImpl = ToLowerExpressionImpl;
class ToUpperExpressionImpl {
  constructor(expression) {
    this.expression = expression;
  }
  toProto() {
    return {
      toUpper: {
        expression: this.expression.toProto()
      }
    };
  }
}

/**
 * @builder
 */
exports.ToUpperExpressionImpl = ToUpperExpressionImpl;
class SubstringExpressionImpl {
  constructor(expression, startExpression, lengthExpression) {
    this.expression = expression;
    this.startExpression = startExpression;
    this.lengthExpression = lengthExpression;
  }
  toProto() {
    const proto = {
      substring: {
        expression: this.expression.toProto(),
        startExpression: this.startExpression.toProto()
      }
    };
    if (this.lengthExpression) {
      proto.substring.lengthExpression = this.lengthExpression.toProto();
    }
    return proto;
  }
}

/**
 * @builder
 */
exports.SubstringExpressionImpl = SubstringExpressionImpl;
class LengthExpressionImpl {
  constructor(expression) {
    this.expression = expression;
  }
  toProto() {
    return {
      length: {
        expression: this.expression.toProto()
      }
    };
  }
}
exports.LengthExpressionImpl = LengthExpressionImpl;
//# sourceMappingURL=Expression.js.map