import { Expression } from '../expressions/Expression';
import * as apiTypes from '../../types/data-item-types';
import { PipelineStage } from './stages';
/**
 * @builder
 */
export interface GroupStage extends PipelineStage {
    by(expression: Expression, key: string): GroupStage;
    sum(expression: Expression, resultFieldName: string): GroupStage;
    avg(expression: Expression, resultFieldName: string): GroupStage;
    min(expression: Expression, resultFieldName: string): GroupStage;
    max(expression: Expression, resultFieldName: string): GroupStage;
    count(resultFieldName: string): GroupStage;
    first(expression: Expression, resultFieldName: string): GroupStage;
    last(expression: Expression, resultFieldName: string): GroupStage;
    push(expression: Expression, resultFieldName: string): GroupStage;
}
export declare class GroupStageImpl implements GroupStage {
    private ids;
    private accumulators;
    by(expression: Expression, key: string): GroupStage;
    sum(expression: Expression, resultFieldName: string): GroupStage;
    avg(expression: Expression, resultFieldName: string): GroupStage;
    min(expression: Expression, resultFieldName: string): GroupStage;
    max(expression: Expression, resultFieldName: string): GroupStage;
    count(resultFieldName: string): GroupStage;
    first(expression: Expression, resultFieldName: string): GroupStage;
    last(expression: Expression, resultFieldName: string): GroupStage;
    push(expression: Expression, resultFieldName: string): GroupStage;
    private addAccumulator;
    toProto(): apiTypes.Stage;
}
//# sourceMappingURL=GroupStage.d.ts.map