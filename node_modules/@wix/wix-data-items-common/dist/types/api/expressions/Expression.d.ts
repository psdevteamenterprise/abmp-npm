import * as apiTypes from '../../types/data-item-types';
export interface Expression {
    /**
     * @internal
     */
    toProto(): apiTypes.Expression;
}
/**
 * @builder
 */
export interface FieldExpression extends Expression {
}
export declare class FieldExpressionImpl implements FieldExpression {
    private fieldPath;
    constructor(fieldPath: string);
    toProto(): apiTypes.Expression;
}
/**
 * @builder
 */
export interface TextExpression extends Expression {
}
export declare class TextExpressionImpl implements TextExpression {
    private value;
    constructor(value: string);
    toProto(): apiTypes.Expression;
}
/**
 * @builder
 */
export interface NumericExpression extends Expression {
}
export declare class NumericExpressionImpl implements NumericExpression {
    private value;
    constructor(value: number);
    toProto(): apiTypes.Expression;
}
/**
 * @builder
 */
export interface AddExpression extends Expression {
}
export declare class AddExpressionImpl implements AddExpression {
    private expressions;
    constructor(expressions: Expression[]);
    toProto(): apiTypes.Expression;
}
/**
 * @builder
 */
export interface SubtractExpression extends Expression {
}
export declare class SubtractExpressionImpl implements SubtractExpression {
    private firstExpression;
    private secondExpression;
    constructor(firstExpression: Expression, secondExpression: Expression);
    toProto(): apiTypes.Expression;
}
/**
 * @builder
 */
export interface MultiplyExpression extends Expression {
}
export declare class MultiplyExpressionImpl implements MultiplyExpression {
    private expressions;
    constructor(expressions: Expression[]);
    toProto(): apiTypes.Expression;
}
/**
 * @builder
 */
export interface DivideExpression extends Expression {
}
export declare class DivideExpressionImpl implements DivideExpression {
    private firstExpression;
    private secondExpression;
    constructor(firstExpression: Expression, secondExpression: Expression);
    toProto(): apiTypes.Expression;
}
/**
 * @builder
 */
export interface SumExpression extends Expression {
}
export declare class SumExpressionImpl implements SumExpression {
    private expressions;
    constructor(expressions: Expression[]);
    toProto(): apiTypes.Expression;
}
/**
 * @builder
 */
export interface AbsExpression extends Expression {
}
export declare class AbsExpressionImpl implements AbsExpression {
    private expression;
    constructor(expression: Expression);
    toProto(): apiTypes.Expression;
}
/**
 * @builder
 */
export interface ModExpression extends Expression {
}
export declare class ModExpressionImpl implements ModExpression {
    private firstExpression;
    private secondExpression;
    constructor(firstExpression: Expression, secondExpression: Expression);
    toProto(): apiTypes.Expression;
}
/**
 * @builder
 */
export interface FloorExpression extends Expression {
}
export declare class FloorExpressionImpl implements FloorExpression {
    private expression;
    constructor(expression: Expression);
    toProto(): apiTypes.Expression;
}
/**
 * @builder
 */
export interface CeilExpression extends Expression {
}
export declare class CeilExpressionImpl implements CeilExpression {
    private expression;
    constructor(expression: Expression);
    toProto(): apiTypes.Expression;
}
/**
 * @builder
 */
export interface ConcatExpression extends Expression {
}
export declare class ConcatExpressionImpl implements ConcatExpression {
    private expressions;
    constructor(expressions: Expression[]);
    toProto(): apiTypes.Expression;
}
/**
 * @builder
 */
export interface StringifyExpression extends Expression {
}
export declare class StringifyExpressionImpl implements StringifyExpression {
    private expression;
    constructor(expression: Expression);
    toProto(): apiTypes.Expression;
}
/**
 * @builder
 */
export interface ToLowerExpression extends Expression {
}
export declare class ToLowerExpressionImpl implements ToLowerExpression {
    private expression;
    constructor(expression: Expression);
    toProto(): apiTypes.Expression;
}
/**
 * @builder
 */
export interface ToUpperExpression extends Expression {
}
export declare class ToUpperExpressionImpl implements ToUpperExpression {
    private expression;
    constructor(expression: Expression);
    toProto(): apiTypes.Expression;
}
/**
 * @builder
 */
export interface SubstringExpression extends Expression {
}
export declare class SubstringExpressionImpl implements SubstringExpression {
    private expression;
    private startExpression;
    private lengthExpression?;
    constructor(expression: Expression, startExpression: Expression, lengthExpression?: Expression | undefined);
    toProto(): apiTypes.Expression;
}
/**
 * @builder
 */
export interface LengthExpression extends Expression {
}
export declare class LengthExpressionImpl implements LengthExpression {
    private expression;
    constructor(expression: Expression);
    toProto(): apiTypes.Expression;
}
//# sourceMappingURL=Expression.d.ts.map