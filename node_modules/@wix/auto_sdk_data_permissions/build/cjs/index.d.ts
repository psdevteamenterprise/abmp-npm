import { HttpClient, NonNullablePaths, MaybeContext, BuildRESTFunction } from '@wix/sdk-types';
import { GetPermissionsResponse, GetPermissionsApplicationErrors, DataPermissions, UpdatePermissionsResponse, UpdatePermissionsApplicationErrors, SpecialPermissions, AddSpecialPermissionsResponse, AddSpecialPermissionsApplicationErrors, UpdateSpecialPermissions, UpdateSpecialPermissionsResponse, UpdateSpecialPermissionsApplicationErrors, RemoveSpecialPermissionsApplicationErrors, GetMyPermissionsResponse, GetMyPermissionsApplicationErrors } from './index.typings.js';
export { Access, AccessLevel, AccessLevelWithLiterals, AccessWithLiterals, ActionEvent, AddSpecialPermissionsRequest, Condition, ConditionOperator, ConditionOperatorOperatorsOneOf, ConditionType, ConditionTypeOfOneOf, ConditionValue, ConditionValueValueOneOf, DependOnOperator, DomainEvent, DomainEventBodyOneOf, Effect, EffectWithLiterals, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EnvironmentCondition, EnvironmentConditionConditionOneOf, EqualOperator, ExperimentCondition, ExperimentOperator, GetMyPermissionsRequest, GetPermissionsRequest, JoinedCondition, JoinedConditionOperator, JoinedConditionOperatorWithLiterals, LikeOperator, MigrateCustomRolesRequest, MigrateCustomRolesResponse, PolicyAssigned, PolicyAssignment, PolicyAssignmentUpdated, PolicyAssignmentsUpdated, PolicyAssignmentsUpdatedEventOneOf, PolicyAuthorizationDataUpdated, PolicyCondition, PolicyOwner, PolicyOwnerType, PolicyOwnerTypeWithLiterals, PolicyStatement, PolicyType, PolicyTypeWithLiterals, PolicyUnassigned, RemoveSpecialPermissionsRequest, RemoveSpecialPermissionsResponse, Resource, ResourcePath, RestoreInfo, SimpleCondition, SimpleConditionOperator, SimpleConditionOperatorWithLiterals, SimpleConditionValue, SimpleConditionValueValueOneOf, SpecialPermissionsSubjectOneOf, Subject, SubjectContext, SubjectContextType, SubjectContextTypeWithLiterals, SubjectType, SubjectTypeWithLiterals, UpdatePermissionsRequest, UpdateSpecialPermissionsRequest } from './index.typings.js';

declare function getPermissions$1(httpClient: HttpClient): GetPermissionsSignature;
interface GetPermissionsSignature {
    /**
     * Retrieves the current permissions configuration for a data collection.
     * @param - ID of the collection to retrieve permissions of.
     */
    (dataCollectionId: string): Promise<NonNullablePaths<GetPermissionsResponse, `dataPermissions._id` | `dataPermissions.itemRead` | `dataPermissions.itemInsert` | `dataPermissions.itemUpdate` | `dataPermissions.itemRemove` | `dataPermissions.specialPermissions` | `dataPermissions.specialPermissions.${number}.userId` | `dataPermissions.specialPermissions.${number}.policyId` | `dataPermissions.specialPermissions.${number}._id` | `dataPermissions.specialPermissions.${number}.itemRead` | `dataPermissions.specialPermissions.${number}.itemInsert` | `dataPermissions.specialPermissions.${number}.itemUpdate` | `dataPermissions.specialPermissions.${number}.itemRemove`, 5> & {
        __applicationErrorsType?: GetPermissionsApplicationErrors;
    }>;
}
declare function updatePermissions$1(httpClient: HttpClient): UpdatePermissionsSignature;
interface UpdatePermissionsSignature {
    /**
     * Updates permissions for the specified data collection.
     *
     * > **Note:** To manage special permissions, call Add Special Permissions ([SDK](https://dev.wix.com/docs/sdk/backend-modules/data/permissions/add-special-permissions) | [REST](https://dev.wix.com/docs/rest/business-solutions/cms/data-permissions/add-special-permissions)), Update Special Permissions ([SDK](https://dev.wix.com/docs/sdk/backend-modules/data/permissions/update-special-permissions) | [REST](https://dev.wix.com/docs/rest/business-solutions/cms/data-permissions/update-special-permissions)), or Remove Special Permissions ([SDK](https://dev.wix.com/docs/sdk/backend-modules/data/permissions/remove-special-permissions) | [REST](https://dev.wix.com/docs/rest/business-solutions/cms/data-permissions/remove-special-permissions)).
     * @param - Permissions to update.
     */
    (dataPermissions: NonNullablePaths<DataPermissions, `_id` | `itemInsert` | `itemRead` | `itemRemove` | `itemUpdate`, 2>): Promise<NonNullablePaths<UpdatePermissionsResponse, `dataPermissions._id` | `dataPermissions.itemRead` | `dataPermissions.itemInsert` | `dataPermissions.itemUpdate` | `dataPermissions.itemRemove` | `dataPermissions.specialPermissions` | `dataPermissions.specialPermissions.${number}.userId` | `dataPermissions.specialPermissions.${number}.policyId` | `dataPermissions.specialPermissions.${number}._id` | `dataPermissions.specialPermissions.${number}.itemRead` | `dataPermissions.specialPermissions.${number}.itemInsert` | `dataPermissions.specialPermissions.${number}.itemUpdate` | `dataPermissions.specialPermissions.${number}.itemRemove`, 5> & {
        __applicationErrorsType?: UpdatePermissionsApplicationErrors;
    }>;
}
declare function addSpecialPermissions$1(httpClient: HttpClient): AddSpecialPermissionsSignature;
interface AddSpecialPermissionsSignature {
    /**
     * Adds special permissions to a specific user or role for the specified data collection.
     *
     * Special permissions allow specific users or roles to perform actions that would otherwise be restricted by the collection-level permissions ([SDK](ADDLINK) | [REST](ADDLINK)).
     * @param - ID of the collection for which to grant special permissions.
     * @param - Special permissions to grant to the user or role for the specified collection.
     */
    (dataCollectionId: string, specialPermissions: SpecialPermissions): Promise<NonNullablePaths<AddSpecialPermissionsResponse, `specialPermissions.userId` | `specialPermissions.policyId` | `specialPermissions._id` | `specialPermissions.itemRead` | `specialPermissions.itemInsert` | `specialPermissions.itemUpdate` | `specialPermissions.itemRemove`, 3> & {
        __applicationErrorsType?: AddSpecialPermissionsApplicationErrors;
    }>;
}
declare function updateSpecialPermissions$1(httpClient: HttpClient): UpdateSpecialPermissionsSignature;
interface UpdateSpecialPermissionsSignature {
    /**
     * Updates the special permissions for the specified user or role.
     *
     * > **Note:** Special permissions that aren't explicitly included in the request are set to `UNSPECIFIED` and are replaced by collection-level permissions ([SDK](ADDLINK) | [REST](ADDLINK)).
     * @param - ID of the special permissions.
     */
    (_id: string, specialPermissions: UpdateSpecialPermissions): Promise<NonNullablePaths<UpdateSpecialPermissionsResponse, `specialPermissions.userId` | `specialPermissions.policyId` | `specialPermissions._id` | `specialPermissions.itemRead` | `specialPermissions.itemInsert` | `specialPermissions.itemUpdate` | `specialPermissions.itemRemove`, 3> & {
        __applicationErrorsType?: UpdateSpecialPermissionsApplicationErrors;
    }>;
}
declare function removeSpecialPermissions$1(httpClient: HttpClient): RemoveSpecialPermissionsSignature;
interface RemoveSpecialPermissionsSignature {
    /**
     * Removes special permissions from a specific user or role.
     *
     * When special permissions are removed, the user or role is subject to collection-level permissions ([SDK](ADDLINK) | [REST](ADDLINK)) for all actions.
     * @param - ID of the special permissions to remove.
     */
    (specialPermissionsId: string): Promise<void & {
        __applicationErrorsType?: RemoveSpecialPermissionsApplicationErrors;
    }>;
}
declare function getMyPermissions$1(httpClient: HttpClient): GetMyPermissionsSignature;
interface GetMyPermissionsSignature {
    /**
     * Retrieves the current user's permissions for the specified data collection.
     * @param - ID of the collection for which to check the current user's permissions.
     */
    (dataCollectionId: string): Promise<NonNullablePaths<GetMyPermissionsResponse, `itemRead` | `itemInsert` | `itemUpdate` | `itemRemove`, 2> & {
        __applicationErrorsType?: GetMyPermissionsApplicationErrors;
    }>;
}

declare const getPermissions: MaybeContext<BuildRESTFunction<typeof getPermissions$1> & typeof getPermissions$1>;
declare const updatePermissions: MaybeContext<BuildRESTFunction<typeof updatePermissions$1> & typeof updatePermissions$1>;
declare const addSpecialPermissions: MaybeContext<BuildRESTFunction<typeof addSpecialPermissions$1> & typeof addSpecialPermissions$1>;
declare const updateSpecialPermissions: MaybeContext<BuildRESTFunction<typeof updateSpecialPermissions$1> & typeof updateSpecialPermissions$1>;
declare const removeSpecialPermissions: MaybeContext<BuildRESTFunction<typeof removeSpecialPermissions$1> & typeof removeSpecialPermissions$1>;
declare const getMyPermissions: MaybeContext<BuildRESTFunction<typeof getMyPermissions$1> & typeof getMyPermissions$1>;

export { AddSpecialPermissionsApplicationErrors, AddSpecialPermissionsResponse, DataPermissions, GetMyPermissionsApplicationErrors, GetMyPermissionsResponse, GetPermissionsApplicationErrors, GetPermissionsResponse, RemoveSpecialPermissionsApplicationErrors, SpecialPermissions, UpdatePermissionsApplicationErrors, UpdatePermissionsResponse, UpdateSpecialPermissions, UpdateSpecialPermissionsApplicationErrors, UpdateSpecialPermissionsResponse, addSpecialPermissions, getMyPermissions, getPermissions, removeSpecialPermissions, updatePermissions, updateSpecialPermissions };
